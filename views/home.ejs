<%- include('partials/header') %>
    <script type="text/javascript">
        class Durak extends Phaser.Scene {
            constructor()
            {
                super({
                    key: 'Game'
                });
            }

            preload()
            {
                this.load.image('background', 'assets/background.jpg');

                this.load.image('cardBack', 'assets/back.png')

                this.load.image('2C', 'assets/2C.png');
                this.load.image('2D', 'assets/2D.png');
                this.load.image('2H', 'assets/2H.png');
                this.load.image('2S', 'assets/2S.png');

                this.load.image('3C', 'assets/3C.png');
                this.load.image('3D', 'assets/3D.png');
                this.load.image('3H', 'assets/3H.png');
                this.load.image('3S', 'assets/3S.png');

                this.load.image('4C', 'assets/4C.png');
                this.load.image('4D', 'assets/4D.png');
                this.load.image('4H', 'assets/4H.png');
                this.load.image('4S', 'assets/4S.png');

                this.load.image('5C', 'assets/5C.png');
                this.load.image('5D', 'assets/5D.png');
                this.load.image('5H', 'assets/5H.png');
                this.load.image('5S', 'assets/5S.png');

                this.load.image('6C', 'assets/6C.png');
                this.load.image('6D', 'assets/6D.png');
                this.load.image('6H', 'assets/6H.png');
                this.load.image('6S', 'assets/6S.png');

                this.load.image('7C', 'assets/7C.png');
                this.load.image('7D', 'assets/7D.png');
                this.load.image('7H', 'assets/7H.png');
                this.load.image('7S', 'assets/7S.png');

                this.load.image('8C', 'assets/8C.png');
                this.load.image('8D', 'assets/8D.png');
                this.load.image('8H', 'assets/8H.png');
                this.load.image('8S', 'assets/8S.png');

                this.load.image('9C', 'assets/9C.png');
                this.load.image('9D', 'assets/9D.png');
                this.load.image('9H', 'assets/9H.png');
                this.load.image('9S', 'assets/9S.png');

                this.load.image('10C', 'assets/10C.png');
                this.load.image('10D', 'assets/10D.png');
                this.load.image('10H', 'assets/10H.png');
                this.load.image('10S', 'assets/10S.png');

                this.load.image('JC', 'assets/JC.png');
                this.load.image('JD', 'assets/JD.png');
                this.load.image('JH', 'assets/JH.png');
                this.load.image('JS', 'assets/JS.png');

                this.load.image('QC', 'assets/QC.png');
                this.load.image('QD', 'assets/QD.png');
                this.load.image('QH', 'assets/QH.png');
                this.load.image('QS', 'assets/QS.png');

                this.load.image('KC', 'assets/KC.png');
                this.load.image('KD', 'assets/KD.png');
                this.load.image('KH', 'assets/KH.png');
                this.load.image('KS', 'assets/KS.png');

                this.load.image('AC', 'assets/AC.png');
                this.load.image('AD', 'assets/AD.png');
                this.load.image('AH', 'assets/AH.png');
                this.load.image('AS', 'assets/AS.png');
            }

            create()
            {
                let self = this;

                this.add.image(960, 540, 'background');

                this.dealText = this.add.text(75, 350, ['Deal Cards']).setFontSize(18).setInteractive();

                this.topCard = this.add.image(960, 540, 'cardBack').setScale(0.3, 0.3);

                this.dealCards = () => {
                    for (let i=0; i<6; i++)
                    {
                        let playerCard = new Card(this);
                        playerCard.render(475 + (i*100), 650, 'AC');
                    }
                }

                this.dealText.on('pointerdown', () => {
                    self.dealCards();
                });

                this.dealText.on('pointerover', () => {
                    self.dealText.setColor('#ff69b4');
                });

                this.dealText.on('pointerout', () => {
                    self.dealText.setColor('#00ffff');
                });

                this.input.on('drag', (pointer, gameObject, dragX, dragY) => {
                    gameObject.x = dragX;
                    gameObject.y = dragY;
                });
            }

            update()
            {

            }
        }

        class Card {
            constructor(scene)
            {
                this.render = (x, y, sprite) => {
                    let card = scene.add.image(x, y, sprite).setScale(0.3, 0.3).setInteractive();
                    scene.input.setDraggable(card);
                    return card;
                }
            }
        }

        const config = {
            type: Phaser.AUTO,
            width: 1920,
            height: 1080,
            scene: [
                Durak
            ]
        };

        const game = new Phaser.Game(config);
    </script>
<%- include('partials/footer') %> 